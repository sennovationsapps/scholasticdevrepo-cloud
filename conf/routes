# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Default path will just redirect to the computer list
#GET     /                           		controllers.Application.index()
#GET     /login                         		controllers.Application.login()
# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                        controllers.Assets.at(path="/public", file)
GET         /assets/javascripts/routes                                           controllers.Application.jsRoutes

# Computers list (look at the default values for pagination parameters)
GET         /search/events                                                       controllers.EventMgmt.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")
GET         /search/events/donate                                                controllers.EventMgmt.donateList()

# Add computer
GET         /events/workflow/:id                                                 controllers.EventWorkflowMgmt.update(id: Event)
GET         /events/workflow                                                     controllers.EventWorkflowMgmt.create


GET         /events/create                                                       controllers.EventMgmt.create()
POST        /events                                                              controllers.EventMgmt.save()

# Edit existing computer
#GET         /events/:id                                                          controllers.EventMgmt.get(id:Event)

#----Start Code T-260-----

GET         /events/:id                                                        controllers.EventMgmt.get(id:Event,p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")


#----End Code T-260-----

GET         /events/:id/update                                                   controllers.EventMgmt.edit(id:Event)
GET         /events/:id/remove                                                   controllers.EventMgmt.remove(id:Event)
POST        /events/:id                                                          controllers.EventMgmt.update(id:Event)
POST        /events/:id/inline                                                   controllers.EventMgmt.updateInline(id:Event)
#new add-----05.08.2015

GET         /events/:id/participants/:participantsId/removeparticipants          controllers.EventMgmt.deleteParticipants(id:Event,participantsId:Long)
GET         /events/:id/participants/addparticipants                             controllers.EventMgmt.addParticipantsForEvent(id:Event)
GET         /events/:id/participants/saveparticipants                             controllers.EventMgmt.saveParticipantsForEvent(id:Event)
#GET         /events/:id/participants/:participantsId/saveparticipants              controllers.EventMgmt.saveParticipantsForEvent(id:Event, participantsId:Pfp)
GET         /events/:id/participants/:participantsId/populateparticipants          controllers.EventMgmt.populateParticipantsForEvent(id:Event,participantsId:Long)
GET         /events/:id/participants/:participantsId/updateparticipants          controllers.EventMgmt.updateParticipantsForEvent(id:Event,participantsId:Long)
# Computers list (look at the default values for pagination parameters)
GET         /search/pfps                                                         controllers.PfpMgmt.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET         /search/pfps/donate                                                  controllers.PfpMgmt.donateList()

# Add pfp
GET         /events/:id/pfps/create                                              controllers.PfpMgmt.create(id:Event)
POST        /events/:id/pfps                                                     controllers.PfpMgmt.save(id:Event)

# Edit existing pfp
GET         /events/:id/pfps/:pfpId                                              controllers.PfpMgmt.get(id:Event, pfpId:Pfp)
GET         /events/:id/pfps/:pfpId/id                                           controllers.PfpMgmt.getById(id:Event, pfpId:Long)
GET         /events/:id/pfps/:pfpId/update                                       controllers.PfpMgmt.edit(id:Event, pfpId:Pfp)
GET         /events/:id/pfps/:pfpId/remove                                       controllers.PfpMgmt.remove(id:Event, pfpId:Pfp)
POST        /events/:id/pfps/:pfpId                                              controllers.PfpMgmt.update(id:Event, pfpId:Pfp)
POST        /events/:id/pfps/:pfpId/inline                                       controllers.PfpMgmt.updateInline(id:Event, pfpId:Pfp)

# Computers list (look at the default values for pagination parameters)
GET         /search/teams                                                        controllers.TeamMgmt.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")

# Add team
GET         /events/:id/teams/create                                             controllers.TeamMgmt.create(id:Event)
POST        /events/:id/teams                                                    controllers.TeamMgmt.save(id:Event)

# Edit existing team
GET         /events/:id/teams/:teamId                                            controllers.TeamMgmt.get(id:Event, teamId:Long)
GET         /events/:id/teams/:teamId/update                                     controllers.TeamMgmt.edit(id:Event, teamId:Long)
POST        /events/:id/teams/:teamId                                            controllers.TeamMgmt.update(id:Event, teamId:Long)

# Add page
GET         /events/:id/pages/create                                             controllers.EventPagesMgmt.create(id:Event)
POST        /events/:id/pages                                                    controllers.EventPagesMgmt.save(id:Event)

# Edit existing page
GET         /events/:id/pages/:pageId                                            controllers.EventPagesMgmt.get(id:Event, pageId:Long)
GET         /events/:id/pages/:pageId/update                                     controllers.EventPagesMgmt.edit(id:Event, pageId:Long)
POST        /events/:id/pages/:pageId                                            controllers.EventPagesMgmt.update(id:Event, pageId:Long)

# Add page
GET         /events/:id/awards/create                                            controllers.AwardsMgmt.create(id:Event)
POST        /events/:id/awards                                                   controllers.AwardsMgmt.save(id:Event)

# Edit existing page
GET         /events/:id/awards/:pageId                                           controllers.AwardsMgmt.get(id:Event, pageId:Long)
GET         /events/:id/awards/:pageId/update                                    controllers.AwardsMgmt.edit(id:Event, pageId:Long)
POST        /events/:id/awards/:pageId                                           controllers.AwardsMgmt.update(id:Event, pageId:Long)

# Add volunteers
GET         /events/:id/volunteers/create                                        controllers.VolunteersMgmt.create(id:Event)
POST        /events/:id/volunteers                                               controllers.VolunteersMgmt.save(id:Event)

GET         /events/:id/volunteers/shift/create                                  controllers.VolunteersMgmt.createShiftVolunteer(id:Event, shiftId:Long)
POST        /events/:id/volunteers/shift                                         controllers.VolunteersMgmt.saveShiftVolunteer(id:Event, shiftId:Long)
GET         /events/:id/volunteers/shift/:shiftId/remove                         controllers.VolunteersMgmt.removeShiftVolunteer(id:Event, shiftId:Long, volunteerId:Long)
GET         /events/:id/volunteers/shift/:shiftId/volunteer                      controllers.VolunteersMgmt.activateShiftVolunteer(id:Event, shiftId:Long, volunteerId:Long)
#==================start:<T-257>=====================routes for the functionality to populate edit volunteers form with previous saved data======================03.08.2015=============================//
GET         /events/:id/volunteers/shift/:shiftId/editExistingVolunteer          controllers.VolunteersMgmt.populateShiftVolunteer(id:Event,shiftId:Long,volunteerId:Long)
#==================end:<T-257>=====================routes for the functionality to populate edit volunteers form with previous saved data======================03.08.2015=============================//
#==================start:<T-257>=====================routes for the functionality to update volunteers form with edited data======================03.08.2015=============================//
GET         /events/:id/volunteers/shift/:shiftId/updateExistingVolunteer        controllers.VolunteersMgmt.updateShiftVolunteer(id:Event,shiftId:Long,volunteerId:Long)
#==================end:<T-257>=====================routes for the functionality to update volunteers form with edited data======================03.08.2015=============================//
#===============start:<T-258>=====================routes for add a volunteer form==============04.08.2015==================================//
GET         /events/:id/volunteers/shift/add                                     controllers.VolunteersMgmt.addShiftVolunteer(id:Event, shiftId:Long)
#===============end:<T-258>=====================routes for add a volunteer form==============04.08.2015==================================//
# Edit existing volunteers
GET         /events/:id/volunteers/:pageId                                       controllers.VolunteersMgmt.get(id:Event, pageId:Long)
GET         /events/:id/volunteers/:pageId/update                                controllers.VolunteersMgmt.edit(id:Event, pageId:Long)
POST        /events/:id/volunteers/:pageId                                       controllers.VolunteersMgmt.update(id:Event, pageId:Long)
GET         /events/:id/volunteers/:pageId/expire                                controllers.VolunteersMgmt.expireVolunteers(id:Event, pageId:Long)

# Add sponsors
GET         /events/:id/sponsors/create                                          controllers.SponsorsMgmt.create(id:Event)
POST        /events/:id/sponsors                                                 controllers.SponsorsMgmt.save(id:Event)

#GET     /events/:id/sponsors/item/create             		controllers.SponsorsMgmt.createItemSponsor(id:Event, itemId:Long)
#POST    /events/:id/sponsors/item                  			controllers.SponsorsMgmt.saveItemSponsor(id:Event, itemId:Long)
#GET     /events/:id/sponsors/item/remove                			controllers.SponsorsMgmt.removeItemSponsor(id:Event, itemId:Long)
#GET     /events/:id/sponsors/item/:itemId/sponsor		controllers.SponsorsMgmt.activateItemSponsor(id:Event, itemId:Long, sponsorId:Long)

# Edit existing sponsors
GET         /events/:id/sponsors/:pageId                                         controllers.SponsorsMgmt.get(id:Event, pageId:Long)
GET         /events/:id/sponsors/:pageId/update                                  controllers.SponsorsMgmt.edit(id:Event, pageId:Long)
POST        /events/:id/sponsors/:pageId                                         controllers.SponsorsMgmt.update(id:Event, pageId:Long)

# Computers list (look at the default values for pagination parameters)
GET         /search/events/donations                                             controllers.DonationMgmt.list(p:Int ?= 0, s ?= "firstName", o ?= "asc", f ?= "")

# Add pfp
GET         /events/:id/donations/create                                         controllers.DonationMgmt.create(id:Event)
GET         /events/:id/donations/:pfpId/create                                  controllers.DonationMgmt.createWithPfp(id:Event, pfpId:Pfp)
GET         /events/:id/donationSponsor/:pfpId/item/:sponsorItem/create          controllers.DonationMgmt.createModalWithSponsor(id:Event, pfpId:Pfp, sponsorItem:Long)
POST        /events/:id/donations                                                controllers.DonationMgmt.save(id:Event)
# start of new addition for payment from credit card =======30.07.2015==========#
POST        /events/:id/payment                                                  controllers.DonationMgmt.validateAndSendCreditInfo(id:Event)
# end of new addition for payment from credit card =========30.07.2015========#
POST        /events/:id/donationSponsor/:pfpId/item/:sponsorItem                 controllers.DonationMgmt.saveModalWithSponsor(id:Event, pfpId:Pfp, sponsorItem:Long)

# Edit existing pfp
GET         /events/:id/donations/:donId                                         controllers.DonationMgmt.get(id:Event, donId:Long)
GET         /events/:id/donations/:pfpId/:donId                                  controllers.DonationMgmt.edit(id:Event, pfpId:Pfp, donId:Long)
GET         /events/:id/donations/:pfpId/:donId/refund                           controllers.DonationMgmt.refund(id:Event, pfpId:Pfp, donId:Long)
POST        /events/:id/donations/:pfpId/:donId                                  controllers.DonationMgmt.update(id:Event, pfpId:Pfp, donId:Long)
POST        /events/:id/donations/:pfpId/:donId/inline                           controllers.DonationMgmt.updateInline(id:Event, pfpId:Pfp, donId:Long)

GET         /events/:id/receipts/:donId/ccReceiptAndSend                         controllers.ReceiptMgmt.getAndSendCCReceipt(id:Event, donId:Donation)
GET         /events/:id/receipts/:donId/cashReceiptAndSend                       controllers.ReceiptMgmt.getAndSendCashReceipt(id:Event, donId:Donation)
GET         /events/:id/receipts/:donId/checkReceiptAndSend                      controllers.ReceiptMgmt.getAndSendCheckReceipt(id:Event, donId:Donation)
GET         /events/:id/receipts/:donId/ccReceipt                                controllers.ReceiptMgmt.getCCReceipt(id:Event, donId:Donation)
GET         /events/:id/receipts/:donId/cashReceipt                              controllers.ReceiptMgmt.getCashReceipt(id:Event, donId:Donation)
GET         /events/:id/receipts/:donId/checkReceipt                             controllers.ReceiptMgmt.getCheckReceipt(id:Event, donId:Donation)

# Reports
#GET	    /reports/donations/allDonations/:id                     controllers.ReportMgmt.allDonationsReport(id:Event)
#GET	    /reports/donations/lastWeek/:id                         controllers.ReportMgmt.lastWeekReport(id:Event)
#GET	    /reports/donations/clearedDonations/:id                 controllers.ReportMgmt.clearedDonationsReport(id:Event)
GET         /reports/admin/pfps/:id                                              controllers.ReportMgmt.adminPfpsReport(id:Event)
GET         /reports/admin/volunteers/:id                                        controllers.ReportMgmt.adminVolunteersReport(id:Event)
GET         /reports/admin/donations/:id                                         controllers.ReportMgmt.adminDonationsReport(id:Event)
GET	    /reports/admin/participantReport/:id                     controllers.ReportMgmt.participantReport(id:String)
GET     /reports/admin/donationReport/:id                        controllers.ReportMgmt.donationReport(id:String)
GET     /reports/admin/volunteersReport/:id                      controllers.ReportMgmt.volunteersReport(id:String)
GET     /reports/admin/sponsorReport/:id                         controllers.ReportMgmt.sponsorReport(id:String)
GET     /reports/admin/donorReport/:id                         controllers.ReportMgmt.donorReport(id:String)
GET     /reports/admin/teamReport/:id                         controllers.ReportMgmt.teamReport(id:String)

GET         /core/helpcenter                                                     controllers.Application.faqs
GET         /core/helpcenter/events                                              controllers.Application.faqsEvents

GET         /core/contactus                                                      controllers.ContactMgmt.contactus
GET         /core/contactus/events                                               controllers.ContactMgmt.contactusEvents
GET         /core/contactus/start                                                controllers.ContactMgmt.contactusToStartEvent
POST        /core/contactus/sendmail                                             controllers.ContactMgmt.sendMail

# Home page
GET         /                                                                    controllers.Application.index
GET         /restricted                                                          controllers.Application.restricted

GET         /profile                                                             controllers.Application.profile
GET         /profile/user/:id                                                    controllers.Application.editProfile(id:Long)
POST        /profile/user/:id                                                    controllers.Application.saveProfile(id:Long)
GET         /profile/events                                                      controllers.Application.profileEvents
GET         /profile/pfps                                                        controllers.Application.profilePfps
GET         /profile/donationsCreate                                             controllers.Application.profileDonationsCreate
GET         /profile/donationsReconcile                                          controllers.Application.profileDonationsReconcile
POST        /profile/donationsReconcile                                          controllers.DonationMgmt.profileDonationsReconcile
GET         /profile/reports                                                     controllers.Application.profileReports
GET         /profile/passwords                                                   controllers.Application.profilePassword
GET         /profile/sys                                                         controllers.Application.profileEditProfiles


#---Start Code 260---
GET         /profile/search/pfps/:id                                           controllers.EventMgmt.profileSearchPfpsEvents(id:Event,p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")

#---End Code 260---




#---------Start Code T-264----

GET         /profile/organizationalsearch                                      controllers.Application.organizationalSearch()

GET        /profile/organizationEditProfiles                                   controllers.Application.organizationEditProfiles()

#---------End Code T-264----



GET         /profile/search/events                                               controllers.Application.profileSearchEvents(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")
GET         /profile/search/donations                                            controllers.Application.profileSearchDonations(p:Int ?= 0, s ?= "dateCreated", o ?= "asc", f ?= "", n ?= "dateCreated")
GET         /profile/search/pfps                                                 controllers.Application.profileSearchPfps(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "", n ?= "name")

GET         /login/events                                                        controllers.Signup.login
GET         /login                                                               controllers.Signup.loginFromCorp
POST        /login                                                               controllers.Signup.doLogin

GET         /loginTaxid/events                                                   controllers.TaxidSignup.login
GET         /loginTaxid                                                          controllers.TaxidSignup.loginFromCorp
POST        /loginTaxid                                                          controllers.TaxidSignup.doLogin

GET         /logout                                                              com.feth.play.module.pa.controllers.Authenticate.logout
GET         /authenticate/:provider                                              com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET         /signup/events                                                       controllers.Signup.signup
GET         /signup                                                              controllers.Signup.signupFromCorp
POST        /signup                                                              controllers.Signup.doSignup

GET         /signupTaxid/events                                                  controllers.TaxidSignup.signup
GET         /signupTaxid                                                         controllers.TaxidSignup.signupFromCorp
POST        /signupTaxid                                                         controllers.TaxidSignup.doSignup

GET         /accounts/unverified                                                 controllers.Signup.unverified
GET         /authenticate/:provider/denied                                       controllers.Signup.oAuthDenied(provider: String)

GET         /accountsTaxid/verify/:token                                         controllers.TaxidSignup.verify(token: String)

GET         /accounts/verify/:token                                              controllers.Signup.verify(token: String)
GET         /accounts/exists                                                     controllers.Signup.exists

GET         /accounts/password/reset/:token                                      controllers.Signup.resetPassword(token: String)
POST        /accounts/password/reset                                             controllers.Signup.doResetPassword

GET         /accountsTaxid/password/reset/:token                                 controllers.TaxidSignup.resetPassword(token: String)
POST        /accountsTaxid/password/reset                                        controllers.TaxidSignup.doResetPassword

GET         /accounts/password/change                                            controllers.Account.changePassword
POST        /accounts/password/change                                            controllers.Account.doChangePassword
GET         /accountsTaxid/password/change                                       controllers.TaxidAccount.changePassword
POST        /accountsTaxid/password/change                                       controllers.TaxidAccount.doChangePassword

GET         /accounts/verify                                                     controllers.Account.verifyEmail
GET         /accounts/verify/:userId                                             controllers.Account.verifyEmailById(userId: Long)

GET         /accounts/add                                                        controllers.Account.link

GET         /accounts/link                                                       controllers.Account.askLink
POST        /accounts/link                                                       controllers.Account.doLink

GET         /accounts/merge                                                      controllers.Account.askMerge
POST        /accounts/merge                                                      controllers.Account.doMerge

GET         /login/password/forgot                                               controllers.Signup.forgotPassword(email: String ?= "")
POST        /login/password/forgot                                               controllers.Signup.doForgotPassword

GET         /loginTaxid/password/forgot                                          controllers.TaxidSignup.forgotPassword(taxid: Long)
POST        /loginTaxid/password/forgot                                          controllers.TaxidSignup.doForgotPassword